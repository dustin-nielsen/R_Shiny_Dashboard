moviedata_clean <- moviedata_clean %>%
mutate(top_100_directors_list = map(crew, extract_names, top_100_directors, "Director"),
top_100_producers_list = map(crew, extract_names, top_100_producers, "Producer"),
top_100_exec_producers_list = map(crew, extract_names, top_100_exec_producers, "Executive Producer"))
temp <- moviedata_clean %>%
filter(str_detect(crew, "Joseph M. Caracciolo Jr."))# %>%
temp <- moviedata_clean %>%
filter(str_detect(crew, "Caracciolo"))
temp <- moviedata_clean %>%
filter(str_detect(crew, "Joseph M. Caracciolo Jr."))
temp <- moviedata_clean %>%
filter(str_detect(crew, "Joseph M. Caracciolo"))
# Define a function to extract names from JSON strings based on job title
extract_names <- function(json_string, top_100, job_title) {
# Define the search pattern based on the job title
search_pattern <- paste0("'job': '", job_title, "', 'name': '[^']*'")
# Extract the names from the JSON string based on the search pattern
names_list <- str_extract_all(json_string, search_pattern) %>%
unlist() %>%
str_remove_all("(^'|'$)") %>%
str_remove(".*name': '")
# Check which names are in the Top100 CSV
names_in_top_100 <- names_list[names_list %in% top_100$Name]
#return(names_in_top_100)
if (length(names_in_top_100) == 0) {
return(NULL)
} else {
return(names_in_top_100)
}
}
# Apply the function to the crew column
moviedata_clean <- moviedata_clean %>%
mutate(top_100_directors_list = map(crew, extract_names, top_100_directors, "Director"),
top_100_producers_list = map(crew, extract_names, top_100_producers, "Producer"),
top_100_exec_producers_list = map(crew, extract_names, top_100_exec_producers, "Executive Producer"))
temp <- moviedata_clean %>%
filter(str_detect(crew, "Joseph M. Caracciolo"))
######
extract_names <- function(json_string, top_100, job_title) {
# Define the search pattern based on the job title
search_pattern <- paste0("'job': '", job_title, "', 'name': '[^']*'")
# Extract the names from the JSON string based on the search pattern
names_list <- str_extract_all(json_string, search_pattern) %>%
unlist() %>%
str_remove_all("(^'|'$)") %>%
str_remove(".*name': '")
# Define the search pattern based on the job title
search_pattern2 <- paste0("'job': '", job_title, "', 'name': \"[^\"]*\"")
# Extract the names from the JSON string based on the search pattern
names_list2 <- str_extract_all(json_string, search_pattern2) %>%
unlist() %>%
str_remove_all("(^'|\"$)") %>%
str_remove(".*name': \"")
# Combine names_list and names_list2 using c()
combined_names_list <- c(names_list, names_list2)
# Check which names are in the Top100 CSV
names_in_top_100 <- combined_names_list[combined_names_list %in% top_100$Name]
#return(names_list2)
if (length(names_in_top_100) == 0) {
return(NULL)
} else {
return(names_in_top_100)
}
}
# Apply the function to the crew column
moviedata_clean <- moviedata_clean %>%
mutate(top_100_directors_list = map(crew, extract_names, top_100_directors, "Director"),
top_100_producers_list = map(crew, extract_names, top_100_producers, "Producer"),
top_100_exec_producers_list = map(crew, extract_names, top_100_exec_producers, "Executive Producer"))
temp <- moviedata_clean %>%
filter(str_detect(crew, "Louis D'Esposito"))
######
extract_names <- function(json_string, top_100, job_title) {
# Define the search pattern based on the job title
search_pattern <- paste0("'job': '", job_title, "', 'name': '[^']*'")
# Extract the names from the JSON string based on the search pattern
names_list <- str_extract_all(json_string, search_pattern) %>%
unlist() %>%
str_remove_all("(^'|'$)") %>%
str_remove(".*name': '")
# Define the search pattern based on the job title
search_pattern2 <- paste0("'job': '", job_title, "', 'name': \"[^\"]*\"")
# Extract the names from the JSON string based on the search pattern
names_list2 <- str_extract_all(json_string, search_pattern2) %>%
unlist() %>%
str_remove_all("(^'|\"$)") %>%
str_remove(".*name': \"")
# Combine names_list and names_list2 using c()
combined_names_list <- c(names_list2, names_list)
# Check which names are in the Top100 CSV
names_in_top_100 <- combined_names_list[combined_names_list %in% top_100$Name]
#return(names_list2)
if (length(names_in_top_100) == 0) {
return(NULL)
} else {
return(names_in_top_100)
}
}
# Apply the function to the crew column
moviedata_clean <- moviedata_clean %>%
mutate(top_100_directors_list = map(crew, extract_names, top_100_directors, "Director"),
top_100_producers_list = map(crew, extract_names, top_100_producers, "Producer"),
top_100_exec_producers_list = map(crew, extract_names, top_100_exec_producers, "Executive Producer"))
temp <- moviedata_clean %>%
filter(str_detect(crew, "Louis D'Esposito"))# %>%
temp <- moviedata_clean %>%
filter(str_detect(crew, "Kevin De La Noy"))
# Apply the function to the crew column
moviedata_clean <- moviedata_clean %>%
mutate(top_100_directors_list = map(crew, extract_names, top_100_directors, "Director"),
top_100_producers_list = map(crew, extract_names, top_100_producers, ".*Producer"),
top_100_exec_producers_list = map(crew, extract_names, top_100_exec_producers, ".*Producer"))
temp <- moviedata_clean %>%
filter(str_detect(crew, "Kevin De La Noy"))# %>%
# Define a function to extract names from JSON strings based on job title
extract_names <- function(json_string, top_100, job_title) {
# Define the search pattern based on the job title
search_pattern <- paste0("'job': '", job_title, "', 'name': '[^']*'")
# Extract the names from the JSON string based on the search pattern
names_list <- str_extract_all(json_string, search_pattern) %>%
unlist() #%>%
#str_remove_all("(^'|'$)") %>%
#str_remove(".*name': '")
# Check which names are in the Top100 CSV
#names_in_top_100 <- names_list[names_list %in% top_100$Name]
return(names_list)
# if (length(names_in_top_100) == 0) {
#   return(NULL)
# } else {
#   return(names_in_top_100)
# }
}
# Apply the function to the crew column
moviedata_clean <- moviedata_clean %>%
mutate(top_100_directors_list = map(crew, extract_names, top_100_directors, "Director"),
top_100_producers_list = map(crew, extract_names, top_100_producers, ".*Producer"),
top_100_exec_producers_list = map(crew, extract_names, top_100_exec_producers, ".*Producer"))
temp <- moviedata_clean %>%
filter(str_detect(crew, "Kevin De La Noy"))# %>%
hello <- moviedata_clean %>%
mutate(top_100_directors_list = map(crew, extract_names, top_100_directors, "Director"),
top_100_producers_list = map(crew, extract_names, top_100_producers, ".*Producer"),
top_100_exec_producers_list = map(crew, extract_names, top_100_exec_producers, ".*Producer"))
View(hello)
# Define a function to extract names from JSON strings based on job title
extract_names <- function(json_string, top_100, job_title) {
# Define the search pattern based on the job title
search_pattern <- paste0("'job': '", job_title, "', 'name': '[^']*'")
# Extract the names from the JSON string based on the search pattern
names_list <- str_extract_all(json_string, search_pattern) %>%
unlist() #%>%
#str_remove_all("(^'|'$)") %>%
#str_remove(".*name': '")
# Check which names are in the Top100 CSV
#names_in_top_100 <- names_list[names_list %in% top_100$Name]
return(search_pattern)
# if (length(names_in_top_100) == 0) {
#   return(NULL)
# } else {
#   return(names_in_top_100)
# }
}
hello <- moviedata_clean %>%
mutate(top_100_directors_list = map(crew, extract_names, top_100_directors, "Director"),
top_100_producers_list = map(crew, extract_names, top_100_producers, ".*Producer"),
top_100_exec_producers_list = map(crew, extract_names, top_100_exec_producers, ".*Producer"))
######
extract_names <- function(json_string, top_100, job_title) {
# Define the search pattern based on the job title
search_pattern <- paste0("'job': '", job_title, "', 'name': '[^']*'")
#"'job': '.*Producer', 'name': '[^']*'"
# Extract the names from the JSON string based on the search pattern
names_list <- str_extract_all(json_string, search_pattern) %>%
unlist() %>%
str_remove_all("(^'|'$)") %>%
str_remove(".*name': '")
# Define the search pattern based on the job title
search_pattern2 <- paste0("'job': '", job_title, "', 'name': \"[^\"]*\"")
# Extract the names from the JSON string based on the search pattern
names_list2 <- str_extract_all(json_string, search_pattern2) %>%
unlist() %>%
str_remove_all("(^'|\"$)") %>%
str_remove(".*name': \"")
# Combine names_list and names_list2 using c()
combined_names_list <- c(names_list2, names_list)
# Check which names are in the Top100 CSV
names_in_top_100 <- combined_names_list[combined_names_list %in% top_100$Name]
#return(names_list2)
if (length(names_in_top_100) == 0) {
return(NULL)
} else {
return(names_in_top_100)
}
}
# Apply the function to the crew column
moviedata_clean <- moviedata_clean %>%
mutate(top_100_directors_list = map(crew, extract_names, top_100_directors, "Director"),
top_100_producers_list = map(crew, extract_names, top_100_producers, "[^']*Producer"),
top_100_exec_producers_list = map(crew, extract_names, top_100_exec_producers, "[^']*Producer"))
temp <- moviedata_clean %>%
filter(str_detect(crew, "Kevin De La Noy"))# %>%
#top_100_producers <- read.csv("IS555FinalProject/Top100Producer.csv")
#top_100_exec_producers <- read.csv("IS555FinalProject/Top100ExecutiveProducer.csv")
top_100_producers_clean <- read.csv("IS555FinalProject/Top100ProducerClean.csv")
######
extract_names <- function(json_string, top_100, job_title) {
# Define the search pattern based on the job title
search_pattern <- paste0("'job': '", job_title, "', 'name': '[^']*'")
#"'job': '.*Producer', 'name': '[^']*'"
# Extract the names from the JSON string based on the search pattern
names_list <- str_extract_all(json_string, search_pattern) %>%
unlist() %>%
str_remove_all("(^'|'$)") %>%
str_remove(".*name': '")
# Define the search pattern based on the job title
search_pattern2 <- paste0("'job': '", job_title, "', 'name': \"[^\"]*\"")
# Extract the names from the JSON string based on the search pattern
names_list2 <- str_extract_all(json_string, search_pattern2) %>%
unlist() %>%
str_remove_all("(^'|\"$)") %>%
str_remove(".*name': \"")
# Combine names_list and names_list2 using c()
combined_names_list <- c(names_list2, names_list)
# Check which names are in the Top100 CSV
names_in_top_100 <- combined_names_list[combined_names_list %in% top_100$Name]
#return(names_list2)
if (length(names_in_top_100) == 0) {
return(NULL)
} else {
return(names_in_top_100)
}
}
# Apply the function to the crew column
moviedata_clean <- moviedata_clean %>%
mutate(top_100_directors_list = map(crew, extract_names, top_100_directors, "Director"),
top_100_producers_list = map(crew, extract_names, top_100_producers_clean, "[^']*Producer"))
#---DATASET---
# you may need to change the path slightly depending on your environment
raw_data <- read_csv('IS555FinalProject/dataset.csv')
#CAST
# Read in the Top100Actors CSV file
top_100_actors <- read.csv("IS555FinalProject/Top100Actors.csv")
# Define a function to extract names from JSON strings and check if they are in the Top100Actors CSV
find_actor_info <- function(json_string) {
# Extract the names from the JSON string
names_list <- str_extract_all(json_string, "'name': '[^']*'") %>%
unlist() %>%
str_remove_all("(^'|'$)") %>%
str_remove("name': '")
# Check which names are in the Top100Actors CSV
names_in_top_100 <- names_list[names_list %in% top_100_actors$Name]
return(list(top_100_actors_list = names_in_top_100,
top_100_actors_count = length(names_in_top_100),
actors_count = length(names_list)))
}
# Apply the function to the cast column and unnest the resulting list columns
moviedata_clean <- raw_data %>%
mutate(results = map(cast, find_actor_info)) %>%
unnest_wider(results)
# CREW
# Read in the Top100Directors.csv file
top_100_directors <- read.csv("IS555FinalProject/Top100Directors.csv")
#top_100_producers <- read.csv("IS555FinalProject/Top100Producer.csv")
#top_100_exec_producers <- read.csv("IS555FinalProject/Top100ExecutiveProducer.csv")
top_100_producers_clean <- read.csv("IS555FinalProject/Top100ProducerClean.csv")
######
extract_names <- function(json_string, top_100, job_title) {
# Define the search pattern based on the job title
search_pattern <- paste0("'job': '", job_title, "', 'name': '[^']*'")
#"'job': '.*Producer', 'name': '[^']*'"
# Extract the names from the JSON string based on the search pattern
names_list <- str_extract_all(json_string, search_pattern) %>%
unlist() %>%
str_remove_all("(^'|'$)") %>%
str_remove(".*name': '")
# Define the search pattern based on the job title
search_pattern2 <- paste0("'job': '", job_title, "', 'name': \"[^\"]*\"")
# Extract the names from the JSON string based on the search pattern
names_list2 <- str_extract_all(json_string, search_pattern2) %>%
unlist() %>%
str_remove_all("(^'|\"$)") %>%
str_remove(".*name': \"")
# Combine names_list and names_list2 using c()
combined_names_list <- c(names_list2, names_list)
# Check which names are in the Top100 CSV
names_in_top_100 <- combined_names_list[combined_names_list %in% top_100$Name]
#return(names_list2)
if (length(names_in_top_100) == 0) {
return(NULL)
} else {
return(names_in_top_100)
}
}
# Apply the function to the crew column
moviedata_clean <- moviedata_clean %>%
mutate(top_100_directors_list = map(crew, extract_names, top_100_directors, "Director"),
top_100_producers_list = map(crew, extract_names, top_100_producers_clean, "[^']*Producer"))
temp <- moviedata_clean %>%
filter(str_detect(crew, "Steven Spielberg"))
View(temp)
top_crew_clean <- read.csv("IS555FinalProject/TopCrew.csv")
# Apply the function to the crew column
moviedata_clean <- moviedata_clean %>%
mutate(top_100_directors_list = map(crew, extract_names, top_100_directors, "Director"),
top_100_producers_list = map(crew, extract_names, top_100_producers_clean, "[^']*Producer"))
#---DATASET---
# you may need to change the path slightly depending on your environment
raw_data <- read_csv('IS555FinalProject/dataset.csv')
# Apply the function to the cast column and unnest the resulting list columns
moviedata_clean <- raw_data %>%
mutate(results = map(cast, find_actor_info)) %>%
unnest_wider(results)
# Apply the function to the crew column
moviedata_clean <- moviedata_clean %>%
mutate(top_100_directors_list = map(crew, extract_names, top_100_directors, "Director"),
top_100_producers_list = map(crew, extract_names, top_100_producers_clean, "[^']*Producer"))
#
temp <- moviedata_clean %>%
filter(str_detect(crew, "Steven Spielberg"))# %>%
#
temp <- moviedata_clean %>%
filter(str_detect(crew, "Steven Spielberg")) %>%
select(top_100_producers_list)
temp <- moviedata_clean %>%
filter(str_detect(crew, "Steven Spielberg"))
#
temp <- moviedata_clean %>%
filter(str_detect(crew, "Steven Spielberg"),
str_detect(title, "War Horse"))
#
temp <- moviedata_clean %>%
filter(str_detect(crew, "Steven Spielberg"))
moviedata_clean %>%
filter(str_detect(crew, "Steven Spielberg"),
str_detect(title, "Munich"))
moviedata_clean %>%
filter(str_detect(crew, "Steven Spielberg"),
str_detect(title, "Munich")) %>%
select(top_100_producers_list)
#
temp <- moviedata_clean %>%
filter(str_detect(crew, "Steven Spielberg"),
str_detect(title, "Munich")) %>%
select(top_100_producers_list) %>%
unnest(top_100_producers_list) %>%
pull()
#
temp <- moviedata_clean %>%
filter(str_detect(crew, "Steven Spielberg")) %>%
select(top_100_directors_list, top_100_producers_list) %>%
unnest(top_100_producers_list) %>%
pull()
#
temp <- moviedata_clean %>%
filter(str_detect(crew, "Steven Spielberg")) %>%
select(top_100_producers_list) %>%
unnest(top_100_producers_list) %>%
pull()
temp <- moviedata_clean %>%
filter(str_detect(crew, "Steven Spielberg"))
# Apply the function to the cast column and unnest the resulting list columns
moviedata_clean <- raw_data %>%
mutate(results = map(cast, find_actor_info)) %>%
unnest_wider(results)
moviedata_clean <- moviedata_clean %>%
mutate(top_100_directors_list = map(crew, extract_names, top_100_directors, "Director"),
num_top_100_directors = map_int(top_100_directors_list, length),
top_100_producers_list = map(crew, extract_names, top_100_producers_clean, "[^']*Producer"),
num_top_100_producers = map_int(top_100_producers_list, length))
moviedata_clean <- moviedata_clean %>%
mutate(top_100_directors_list = map(crew, extract_names, top_100_directors, "Director"),
num_top_100_directors = map_int(top_100_directors_list, length),
top_100_producers_list = map(crew, extract_names, top_100_producers_clean, "[^']*Producer"),
num_top_100_producers = map_int(top_100_producers_list, length),
total_top_100 = num_top_100_directors + num_top_100_producers)
moviedata_clean <- moviedata_clean %>%
select(-c(top_100_actors_list, top_100_directors_list, top_100_producers_list))
moviedata_clean <- moviedata_clean %>%
select(-c(top_100_actors_list, top_100_directors_list, top_100_producers_list)) %>%
select(-c(tagline, keywords, cast, crew))
# Apply the function to the cast column and unnest the resulting list columns
moviedata_clean <- raw_data %>%
mutate(results = map(cast, find_actor_info)) %>%
unnest_wider(results)
moviedata_clean <- moviedata_clean %>%
mutate(top_100_directors_list = map(crew, extract_names, top_100_directors, "Director"),
num_top_100_directors = map_int(top_100_directors_list, length),
top_100_producers_list = map(crew, extract_names, top_100_producers_clean, "[^']*Producer"),
num_top_100_producers = map_int(top_100_producers_list, length),
crew_top_100 = num_top_100_directors + num_top_100_producers)
moviedata_clean <- moviedata_clean %>%
select(-c(top_100_actors_list, top_100_directors_list, top_100_producers_list)) %>%
select(-c(tagline, keywords, cast, crew))
# Apply the function to the cast column and unnest the resulting list columns
moviedata_clean <- raw_data %>%
mutate(results = map(cast, find_actor_info)) %>%
unnest_wider(results)
moviedata_clean <- moviedata_clean %>%
mutate(top_100_directors_list = map(crew, extract_names, top_100_directors, "Director"),
num_top_100_directors = map_int(top_100_directors_list, length),
top_100_producers_list = map(crew, extract_names, top_100_producers_clean, "[^']*Producer"),
num_top_100_producers = map_int(top_100_producers_list, length),
crew_top_100 = num_top_100_directors + num_top_100_producers)
moviedata_clean <- moviedata_clean %>%
select(-c(top_100_actors_list, top_100_directors_list, top_100_producers_list)) %>%
select(-c(tagline, Keywords, cast, crew))
# Apply the function to the cast column and unnest the resulting list columns
moviedata_clean <- raw_data %>%
mutate(results = map(cast, find_actor_info)) %>%
unnest_wider(results) %>%
mutate(actor_ratio = top_100_actors_count/actors_count)
moviedata_clean <- moviedata_clean %>%
mutate(top_100_directors_list = map(crew, extract_names, top_100_directors, "Director"),
num_top_100_directors = map_int(top_100_directors_list, length),
top_100_producers_list = map(crew, extract_names, top_100_producers_clean, "[^']*Producer"),
num_top_100_producers = map_int(top_100_producers_list, length),
crew_top_100 = num_top_100_directors + num_top_100_producers)
moviedata_clean <- moviedata_clean %>%
select(-c(top_100_actors_list, top_100_directors_list, top_100_producers_list)) %>%
select(-c(tagline, Keywords, cast, crew))
# install/load packages
if (!requireNamespace("arrow", quietly = TRUE)) {
install.packages("arrow")
}
temp
library(tidyverse)
library(tidymodels)
library(arrow)
library(lubridate)
getwd()
# "open" the dataset.
# (Note that this doesn't read the data into memory)
dataset_path <- "data/nyc_uber"
uber_data <- open_dataset(dataset_path, format = "parquet")
# Most of the main dplyr commands still work:
uber_data %>%
glimpse()
uber_data
# Okay let's pull a few summarized views without destroying our computers:
uber_data %>%
filter(!is.na(PULocationID) & !is.na(DOLocationID)) %>%
mutate(pickup_hour = hour(pickup_datetime)) %>%
group_by(pickup_hour) %>%
summarise(
avg_trip_duration = median(trip_time, na.rm = TRUE),
num_trips = n()
) %>%
arrange(desc(num_trips)) %>%
collect()
uber_data %>%
filter(!is.na(PULocationID) & !is.na(DOLocationID) & !is.na(hour)) %>%
select(trip_miles, driver_pay, hour, congestion_surcharge,tolls, driver_pay, trip_miles,) %>%
group_by(hour) %>%
summarize(mean_congestion_surcharge = mean(congestion_surcharge, na.rm = T),
mean_trip_miles = mean(trip_miles, na.rm = T),
mean_driver_pay = mean(driver_pay, na.rm = T),
tolls = mean(tolls, na.rm = T),
driver_pay = mean(driver_pay, na.rm = T),
trip_miles = mean(trip_miles, na.rm = T)) %>%
arrange(hour) %>%
collect() %>%
print(n = 24)
uber_data_sample <- uber_data %>%
filter(!is.na(PULocationID) & !is.na(DOLocationID)) %>%
mutate(
pickup_hour = hour(pickup_datetime),
pickup_delay_sec = difftime(pickup_datetime, request_datetime, units = "secs")
) %>%
select(pickup_delay_sec, sales_tax, pickup_hour, trip_miles, congestion_surcharge, tips) %>%
slice_sample(n = 100000) %>%
collect()
uber_data_sample
model_data <- uber_data_sample %>%
mutate(pickup_delay_min = as.numeric(pickup_delay_sec)/60) %>%
mutate(tip = as.factor(if_else(tips > 0, 1, 0))) %>%
select(-pickup_delay_sec, -tips)
model_data %>% count(tip)
uber_split <- initial_split(model_data, strata = tip)
uber_training <- uber_split %>% training()
uber_folds <- vfold_cv(uber_training, strata = tip)
uber_rec <- recipe(tip ~ ., data = uber_training) %>%
step_corr(all_numeric_predictors()) %>%
step_normalize(all_numeric_predictors())
uber_xgb <- boost_tree() %>%
set_engine('xgboost') %>%
set_mode('classification')
uber_wkfl <- workflow() %>%
add_recipe(uber_rec) %>%
add_model(uber_xgb)
cv_results <- uber_wkfl %>% fit_resamples(resamples = uber_folds)
overall_results <- uber_wkfl %>% last_fit(split = uber_split)
cv_results %>% collect_metrics()
overall_results %>% collect_metrics()
library(tidyverse)
library(data.table)
library(shiny)
library(shinythemes)
library(shinydashboard)
library(plotly)
library(bslib)
library(feather)
library(DT)
setwd("C:/GitHubProjects/Strat/R_Shiny_Dashboard")
load('data/unique_cpc_groups/unique_cpc_group.Rdata')
assignee <- read_feather('data/g_assignee_disambiguated_2012_2021.feather')
location <- read_feather('data/g_location_disambiguated_2012_2021.feather')
patent <- read_feather('data/g_patent_2012_2021.feather')
cpc <- read_feather('data/g_cpc_current_2012_2021.feather')
cpc$patent_id <- as.character(cpc$patent_id)
# unique_cpc_group <- head(unique_cpc_group)
cpc <- head(cpc)
runApp()
